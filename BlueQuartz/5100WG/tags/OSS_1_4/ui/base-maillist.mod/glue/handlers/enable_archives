#!/usr/bin/perl -I/usr/sausalito/perl
#
# depends on:
#   MailList._CREATE
#   MailList.name
#   MailList.Archive.enabled

use Sauce::Util;
use File::Path;
#use Net::SMTP;
use strict;
#use FileHandle;
use CCE;
use I18n;
use SendEmail;
my $cce = new CCE;
$cce->connectfd(\*STDIN,\*STDOUT);

my $oid = $cce->event_oid();

my $ok;
my ($main_old, $main_new, $arch_old, $arch_new);
my $obj_main; ($ok, $obj_main, $main_old, $main_new)  = $cce->get($oid, "");
my $obj_arch; ($ok, $obj_arch, $arch_old, $arch_new)  = $cce->get($oid, "Archive");

my $listname = $obj_main->{"name"};
$listname =~ s/\//_/g;


# Sauce::Util::editfile("/etc/mail/aliases.majordomo", \&setArchiveEnabled, $listname, $obj_arch->{"enabled"}, $cce);

my $action = "/dev/null";
if ($obj_arch->{enabled}) {
  my $expireDays = $obj_arch->{keep_for_days};
  $expireDays = $expireDays * 24 * 60 * 60; # expire works in seconds
  my $expireAction = "";
  if ($expireDays) {
    $expireAction = "$expireDays"; 
  }

  $action = "\"|/home/mhonarc/bin/mh-wrapper ${listname} ${expireDays}\"";
}

my $ok = Sauce::Util::editfile('/etc/mail/aliases',
  \&setArchiveEnabled,
  $listname, 
  $action);

system("/usr/bin/newaliases &> /dev/null &");

my $umask = umask(022);
mkdir ("/usr/sausalito/ui/web/base/maillist/archives", 0755);
system ("chown mail.daemon /usr/sausalito/ui/web/base/maillist/archives &> /dev/null");
umask($umask);

if ($obj_arch->{"enabled"}) {
	
	# make sure the directory to store files in exists first
	if(! -d "/home/mhonarc/data"){
		$umask = umask(022);
		mkpath("/home/mhonarc/data", 0, 0755);
		umask($umask);
	}

	# setup archive directory, before sending email
	if (! -d "home/mhonarc/directory/${listname}") {
	    $umask = umask(022);
	    mkdir ("/home/mhonarc/data/${listname}", 0755);
	    system ("/bin/chown", "mail.daemon", "/home/mhonarc/data/${listname}");
	    umask($umask); 
	}

	if (! -e "/home/mhonarc/data/${listname}.enabled") {
		# need to send a welcome message
		use FileHandle;
		my $locale = _get_locale();
		if (!$locale) { $locale = 'en'; }
		my $i18n = new I18n();
		$i18n->setLocale($locale);
		SendEmail::sendEmail($obj_main->{name},  #to
			"root <root>",	#from
			$i18n->get("[[base-maillist.WelcomeMessageSubject]]"), #subject
			$i18n->get("[[base-maillist.WelcomeMessageBody]]",{name=>$obj_main->{name}}) #body
		);
		system("/bin/touch","/home/mhonarc/data/${listname}.enabled");
	}
} else {
  unlink("/home/mhonarc/data/${listname}.enabled");
  unlink("/usr/sausalito/ui/web/base/maillist/archives/${listname}");
  rmtree("/home/mhonarc/data/${listname}",0);
}

sub setArchiveEnabled
{
  my ($fin, $fout, $listname, $action) = @_;
  $ok = 0;
  while( <$fin> ) {
    if (/${listname}-archival:\s*(.*)/) {
      print $fout "${listname}-archival: $action\n";
      $ok = 1;
    } else {
      print $fout $_;
    }
  }
  if (!$ok) {
    $cce->bye("DEFER");
    exit();
  }
}

sub _get_locale
# _get_locale -- Get the locale of the admin user
#
# Arguments: None
# Returns:   Locale of admin, undef on failure
{
        my $language;

        my $cce = new CCE;
        $cce->connectuds();

        my (@oids) = $cce->find('System');
        my ($ok, $object) = $cce->get( $oids[0] ) if (@oids > 0);
        $language = ${$object}{'productLanguage'} if ($ok);
        $cce->bye("SUCCESS");

        if ( ! $language ) {
                die "Failed to get locale\n";
        }

        chomp $language;

        # success
        return $language if (length $language > 0 && $language ne "browser");

        # failure
        return "en";
}
$cce->bye("SUCCESS");
