#!/bin/bash
################################################################################
#
#   $Id: proxy.conf 201 2003-07-18 19:11:07Z will $
#   requires bash v2
#
#   Duncan Laurie (void@sun.com)
#
# This sets up SOCKSv5 and HTTP/FTP Proxy servers to access the Internet
# from Cobalt, SWAN, or VPN.  It defines the environment variables
# necessary to seamlessly use a Proxy server from many programs.  Also
# installs a transparent wrapper around the standard network tools.
#
# The OpenSSH implementation does not work with runsocks/socksify and 
# is instead implemented as a separate rssh/rscp wrapper script.
#
#   INSTALL : read/execute proxy.conf from system or user profile
#           : test -s /etc/proxy.conf && source /etc/proxy.conf
#
################################################################################
#
#                      SOCKSv5 Proxy Servers [port 1080]
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  HOSTNAME[in]       IPADDR[in]      HOSTNAME[ex]   IPADDR[ex]      LOCATION
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  scaea-socks        192.18.43.19    scaea-socks    192.18.43.1[67] Santa Clara
#  nwkea-socks        192.18.42.19    nwkea-socks    192.18.42.1[67] Newark
#  tengboche.central  129.147.5.20    tengboche      192.18.98.20    Broomfield
#  franc.east         129.148.242.4   franc.usec     192.9.51.4      Chelmsford
#  beryllium.uk       129.156.88.4    beryllium.eu   192.18.1.4      Watchmoor
#  whitney.japan      129.158.115.6   whitney.pr     210.138.200.6   Japan
#  icsocks.holland    129.159.200.7   faeroes.eu     192.18.240.7    Amersfoort
#  raptor.singapore   129.158.73.2    raptor.pr      192.18.17.2     Singapore
#
################################################################################
#
#  HTTP/FTP Proxy Servers [port 8080]
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  HOSTNAME[in]       IPADDR[in]      
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  wcmtv32a.sfbay     129.145.120.35	(1)
#  wcscaa.sfbay       129.145.155.40	(2)
#  wcscab.sfbay       129.145.155.56	(3)
#  webcache.corp      129.145.35.16   
#  webcache.eng       129.146.1.171
#  wcmila.eng         129.150.111.31
#  wcsca28a.sfbay     129.145.48.35
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
################################################################################

ID_SOCKSv5=0
ID_SOCKSv4=1
socksServerList=(192.18.43.19 192.18.42.19)
socksServerPort=1080

ID_ProxyHTTP=0
ID_ProxyFTP=1
proxyServerList=(129.145.120.35 129.145.155.40 129.145.155.56)
proxyServerPort=8080

#
# wrapper to `SOCKSify' standard network services
#
# Debian: socksify
# RedHat: runsocks
socksWrapper=socksify

#
# list of services to wrap
# but not the ssh family, it handles things differently
#
networkServiceList=(telnet ftp cvs)

#
# various environment variables that can configure
# the operation of the SOCKS client library
# (will override /etc/libsocks5.conf)
#

set -a

# URL identifies proxy server for `HTTP' requests
http_proxy="http://${proxyServerList[${ID_ProxyHTTP}]}:${proxyServerPort}"

# URL identifies proxy server for `FTP' requests
ftp_proxy="http://${proxyServerList[${ID_ProxyFTP}]}:${proxyServerPort}"

# identifies the SOCKSv5 server to use (port is optional)
SOCKS5_SERVER="${socksServerList[$ID_SOCKSv5]}:${socksServerPort}"

# identifies the SOCKSv4 server to use (port is optional)
SOCKS4_SERVER="${socksServerList[$ID_SOCKSv4]}:${socksServerPort}"

# the SOCKS server to use when SOCKS4_SERVER or SOCKS5_SERVER
# is not set and a client requests a specific version
SOCKS_SERVER="$SOCKS5_SERVER"

# location of client library config (default is /etc/libsocks5.conf)
unset SOCKS5_LIBCONF

# NEVER fake hostname lookups
unset SOCKS5_LOCALDNSONLY

# fake ALL hostname lookups
unset SOCKS5_FAKEALLHOSTS

# encrypt the link (needs kerberos)
unset SOCKS5_ENCRYPT

# debug modes: 1=NOTICE, 2=INFO, 3=DEBUG
unset SOCKS5_DEBUG

# send debug output to stderr
unset SOCKS5_LOG_STDERR

# send debug output to syslog
unset SOCKS5_LOG_SYSLOG

# tell next server not to check data integrity (for kerberos)
unset SOCKS5_NOINTCHK

# disregard checking the client netmask
unset SOCKS5_NONETMASKCHECK

# prevent system from closing/dup2ing stderr
unset SOCKS5_PRESERVE_STDERR

# the authentication username
unset SOCKS5_USER

# the authentication password
unset SOCKS5_PASSWD

set +a

#
# check to see if the SOCKS server was defined.
# if yes, setup SOCKS wrapper standard network services
#
if [ -n "$SOCKS_SERVER" -a -n "$socksWrapper" ] ; then
    if type -p "$socksWrapperProg" ; then
        for netSVC in "$networkServiceList" ; do
            alias r${netSVC}="$socksWrapper $netSVC"
        done
    fi
fi

