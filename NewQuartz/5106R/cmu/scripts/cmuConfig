#!/usr/bin/perl
# $Id: cmuConfig 922 2003-07-17 15:22:40Z will $
# Cobalt Networks, Inc http://www.cobalt.com
# Copyright 2001 Sun Microsystems, Inc.  All rights reserved.
use strict;

use lib "/usr/cmu/perl";
require CmuCfg;

my $cfg = CmuCfg->new(type => 'config');
$cfg->parseOpts();

require TreeXml;

if(!$cfg->isGlb('cmuConfig')) {
	$cfg->putGlb('cmuConfig', '/etc/cmu/cmuConfig.xml');
}

if($cfg->glb('name') eq 'cobaltBase') {
	die "You cannot modify the Cobalt Base with this utility\n";
}

if($cfg->glb('action') eq 'add') { addConfig($cfg); } 
elsif($cfg->glb('action') eq 'del') { delConfig($cfg); } 
else { listConfig($cfg); }

exit 0;

sub addConfig
{
	my $conf = shift;

	my $cmuConfig = {};
	my $appList = TreeXml::readXml($conf->glb('cmuConfig'), 0);

	# check to pieces
	if(!$conf->isGlb('name')) {
		die "You need to prodive a name (-n) to add a config\n";
	} elsif(defined $appList->{ $conf->glb('name') }) {
		die "Name already in use, cannot add ", $conf->glb('name'), "\n";
	}

	if(!$conf->isGlb('xmlConfig')) {
		die "You need to provide a file name (-c) for the config file\n";
	} elsif(!-f $conf->glb('xmlConfig')) {
		die "Cannot find file: ", $conf->glb('xmlConfig'), "\n";
	}
	makeBackup($conf);

	my $node = {};
	$node->{configFile} = $conf->glb('xmlConfig');
	TreeXml::addNode($conf->glb('name'), $node, $appList);
	TreeXml::addNode('cmuConfig', $appList, $cmuConfig);
	TreeXml::writeXml($cmuConfig, $conf->glb('cmuConfig'));
	return 1;
}

sub delConfig
{
	my $conf = shift;
	my $cmuConfig = {};
	my $appList = TreeXml::readXml($conf->glb('cmuConfig'), 0);

	use Data::Dumper;
	warn Dumper($appList);
	# check to pieces
	if(!$conf->isGlb('name')) {
		die "You need to prodive a name (-n) to remove a config\n";
	} elsif(!defined $appList->{ $conf->glb('name') }) {
		die "Name does not exist, cannot remove ", $conf->glb('name'), "\n";
	}
	makeBackup($conf);

	TreeXml::deleteNode($conf->glb('name'), $appList);
	TreeXml::addNode('cmuConfig', $appList, $cmuConfig);
	TreeXml::writeXml($cmuConfig, $conf->glb('cmuConfig'));
	return 1;

}

sub listConfig
{
	my $conf = shift;
	print "Current Configurations:\n";
	
	my $appList = TreeXml::readXml($conf->glb('cmuConfig'), 0);

	foreach my $app (keys %{ $appList }) {
		if($app eq 'cobaltBase') {
		print "$app uses config file ", $appList->{$app}->{configFile}, " (DEFAULT)\n";
		} else {
		print "$app uses config file ", $appList->{$app}->{configFile}, "\n";
		}
	}
	return 1;
}

sub makeBackup
{
	my $conf = shift;
	my $cmuConfig = $conf->glb('cmuConfig');
	my $ret = system("cp ".$cmuConfig." ".$cmuConfig.".bak");
	if($ret != 0) {
		die "Could not make backup copy of $cmuConfig\n";
	}
	return 1;
}
