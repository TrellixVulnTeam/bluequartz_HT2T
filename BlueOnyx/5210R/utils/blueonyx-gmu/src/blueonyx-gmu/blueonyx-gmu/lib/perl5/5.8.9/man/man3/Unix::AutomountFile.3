.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AutomountFile 3"
.TH AutomountFile 3 "2000-05-02" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Unix::AutomountFile \- Perl interface to automounter files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Unix::AutomountFile;
.Ve
.PP
.Vb 6
\&  $am = new Unix::AutomountFile "/etc/auto_home";
\&  $am->automount("newuser", "fileserver:/export/home/&");
\&  $am->options("newuser", "-rw,nosuid");
\&  $am->delete("olduser");
\&  $am->commit();
\&  undef $am;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Unix::AutomountFile module provides an abstract interface to automounter
files.  It automatically handles file locking, getting colons and commas in
the right places, and all the other niggling details.  \s-1WARNING:\s0 This module is
probably Solaris specific at this point.  I have only looked at Solaris format
automount files thus far.  Also, you cannot edit /etc/auto_master with this
module, since it is in a different format than the other automount files.
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "add_server( \s-1MOUNT\s0, @SERVERS )"
.el .Sh "add_server( \s-1MOUNT\s0, \f(CW@SERVERS\fP )"
.IX Subsection "add_server( MOUNT, @SERVERS )"
This method will add additional servers to an existing automount point.  It
returns 1 on success and 0 on failure.
.Sh "automount( \s-1MOUNT\s0 [,@SERVERS] )"
.IX Subsection "automount( MOUNT [,@SERVERS] )"
This method can add, modify, or return information about a mount point.
Supplied with a single mount parameter, it will return a list of the server
entries for that mount point, or undef if no such mount exists.  If you supply
more than one parameter, the mount point will be created or modified if it
already exists.  The list is also returned to you in this case.
.Sh "automounts( )"
.IX Subsection "automounts( )"
This method returns a list of all existing mount points, sorted
alphabetically.  In scalar context, this method returns the total number of
mount points.
.Sh "commit( [\s-1BACKUPEXT\s0] )"
.IX Subsection "commit( [BACKUPEXT] )"
See the Unix::ConfigFile documentation for a description of this method.
.Sh "delete( \s-1MOUNT\s0 )"
.IX Subsection "delete( MOUNT )"
This method will delete the named mount point.  It has no effect if the
supplied mount point does not exist.
.Sh "new( \s-1FILENAME\s0 [,OPTIONS] )"
.IX Subsection "new( FILENAME [,OPTIONS] )"
See the Unix::ConfigFile documentation for a description of this method.
.Sh "options( \s-1MOUNT\s0 [,OPTIONS] )"
.IX Subsection "options( MOUNT [,OPTIONS] )"
Read or modify the mount options associated with a mount point.  Returns the
options in either case.
.Sh "rename( \s-1OLDNAME\s0, \s-1NEWNAME\s0 )"
.IX Subsection "rename( OLDNAME, NEWNAME )"
Renames a mount point.  If \s-1NEWNAME\s0 corresponds to an existing mount point,
that mount point is overwritten.  Returns 0 on failure and 1 on success.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Snodgrass, ssnodgra@fore.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Unix::AliasFile, Unix::ConfigFile, Unix::GroupFile, Unix::PasswdFile
