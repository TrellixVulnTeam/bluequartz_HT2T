#!/usr/bin/perl
# $Id: cmuConflict 922 2003-07-17 15:22:40Z will $
# Cobalt Networks, Inc http://www.cobalt.com
# Copyright 2001 Sun Microsystems, Inc.  All rights reserved.
use strict;

use lib "/usr/cmu/perl";

require CmuCfg;
my $cfg = CmuCfg->new(type => 'conflict');
$cfg->readConf();
$cfg->parseOpts();

$| = 1;

use IPC::Open3;
use Global;
use TreeXml;
use Resolve;
use RaQConflict;

if($cfg->isDestDir) {
    $cfg->putDestDir(Global::parseD($cfg->destDir));
} else { 
    cmuLog("ERROR", "Cannot find directory: ".$cfg->destDir."\n");
    exit 1;
}
chdir $cfg->destDir || die "Could not chdir to ", $cfg->destDir, ": $!\n";

if(!$cfg->isSess) { $cfg->putSess($$) }

my $origXml = $cfg->cmuXml;
my $sessXml = $cfg->sessXml;
if(-f $sessXml) {
    $origXml = $sessXml;
} else { qx/cp $origXml $sessXml/; }

if(!-f $origXml && !-f $sessXml) {
    die "Cannot find cmu.xml in ", $cfg->destDir, "\n";
}

# apply the resolution object if one provided
if($cfg->isGlb('resoXml') && -f $cfg->glb('resoXml')) {
    my $resoFile = $cfg->glb('resoXml');
    my $resoData = TreeXml::readXml($resoFile, 0);
    my $migrate = TreeXml::readXml($sessXml, 0);

    my $flict = RaQConflict->new($migrate, $migrate, $cfg->{glbConf});
    if($cfg->isSess) { $flict->{sessID} = $cfg->sess; }

    my $res;
    foreach my $conflict (@{ $resoData->{conflict} }) {
        $res = Resolve->new(%{ $conflict });    
        if(!$res->result) { warn "No result found, skipping\n"; } 
        else { $flict->runResult($res) }
    }
    my $iTree = {};
    TreeXml::addNode('migrate', $migrate, $iTree);
    TreeXml::writeXml($iTree, $sessXml);
}

my $cobaltBase = {};
my $appConf = $cfg->{appConf};
TreeXml::addNode('cobaltBase', $cfg->{glbConf}, $cobaltBase);

# get current data
my $pid;
my $outTmpFile = $cfg->destDir."/cmuScanout.xml.".$cfg->sess;
my $scanOutCmd = $cfg->lib('scanout')." -p -x -c -f $outTmpFile";
warn "scanout cmd : ", $scanOutCmd , "\n";
if($pid = open3(*WR, *RE, *ER, $scanOutCmd)) {
    print WR TreeXml::writeXml($cobaltBase);
    close(WR);
    close(RE);
    while(<ER>) { ; }
    close(ER);
    waitpid($pid, 0);
} 

my $conflictCmd = $cfg->lib('conflict');
$conflictCmd .= " -g -w -i ".$sessXml." -e ".$outTmpFile." -f ".$sessXml
        ." -s ".$cfg->sess." -d ".$cfg->destDir;
warn "conflict cmd is: ", $conflictCmd, "\n";
my $ret = qx/$conflictCmd/;
print $ret;

exit 0;

# 
# Copyright (c) 2016 Michael Stauber, SOLARSPEED.NET
# Copyright (c) 2016 Team BlueOnyx, BLUEONYX.IT
# Copyright (c) 2003 Sun Microsystems, Inc. 
# All Rights Reserved.
# 
# 1. Redistributions of source code must retain the above copyright 
#     notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
#     notice, this list of conditions and the following disclaimer in 
#     the documentation and/or other materials provided with the 
#     distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its 
#     contributors may be used to endorse or promote products derived 
#     from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.
# 
# You acknowledge that this software is not designed or intended for 
# use in the design, construction, operation or maintenance of any 
# nuclear facility.
# 