#!/usr/bin/perl -I/usr/sausalito/perl
# $Id: nginx_defaults.pl

# Debugging switch:
$DEBUG = "0";
if ($DEBUG)
{
    use Sys::Syslog qw( :DEFAULT setlogsock);
}

use CCE;
use Sauce::Util;
use Sauce::Config;
use Net::IP qw(:PROC);

my $cce = new CCE;
$cce->connectfd();

# Location of config files:
$nginx_conf = '/etc/nginx/conf.d/default.conf';
$default_conf = "/etc/nginx/ssl_defaults.conf";

@SysOID = $cce->find("System");

($ok, $System) = $cce->get($SysOID[0]);
($ok, $Nginx) = $cce->get($SysOID[0], 'Nginx');

#
### Assemble new config:
#

$server_name = $System->{hostname} . "." . $System->{domainname};
@resolvers = $cce->scalar_to_array($System->{dns});
$resolver_line = '';
# Check each resolver IP if it's IPv4 or IPv6:
foreach my $ip (@resolvers) {
    $ip_check = Net::IP->new($ip);
    if ($ip_check->version() eq "6") {
        $resolver_line .= '[' . $ip . '] ';
    }
    else {
        $resolver_line .= $ip . ' ';
    }
}
chomp($resolver_line);

&debug_msg("resolver_line: $resolver_line \n");

$new_conf = '#' . "\n";
$new_conf .= '# Do NOT edit this file. The GUI will replace this file on edits.' . "\n";
$new_conf .= '# Custom edits need to go into separate config files in one of' . "\n";
$new_conf .= '# the separate include directories under /etc/nginx/' . "\n";
$new_conf .= '#' . "\n";
$new_conf .= '' . "\n";
$new_conf .= 'server {' . "\n";
$new_conf .= '    listen       [::]:443 default_server ssl http2;' . "\n";
$new_conf .= '    listen       443 default_server ssl http2;' . "\n";
$new_conf .= '    server_name  ' . $server_name . ';' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    include /etc/nginx/headers.d/*.conf;' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    access_log  /var/log/nginx/access.log  main;' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # SSL certificate, intermediate, private key:' . "\n";
$new_conf .= '    ssl_certificate             /etc/admserv/certs/nginx_cert_ca_combined;' . "\n";
$new_conf .= '    ssl_certificate_key         /etc/admserv/certs/key;' . "\n";
$new_conf .= '    ssl_trusted_certificate     /etc/admserv/certs/nginx_cert_ca_combined;' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # Insert external protocols and chiffres for SSL:' . "\n";
$new_conf .= '    include /etc/nginx/ssl_proto_chiffres.conf;' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # Insert external SSL Session cfg, resolver and OSCP-Stapling:' . "\n";
$new_conf .= '    include /etc/nginx/ssl_defaults.conf;' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # Redirect index.html to GUI:' . "\n";
$new_conf .= '    location /index.html {' . "\n";
$new_conf .= '        return 301 http://' . $server_name . ':444/;' . "\n";
$new_conf .= '    }' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # Anything else is served:' . "\n";
$new_conf .= '    location / {' . "\n";
$new_conf .= '        root   /var/www/html;' . "\n";
$new_conf .= '        index  index.html index.htm;' . "\n";
$new_conf .= '    }' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # Special provisions for /libImage/:' . "\n";
$new_conf .= '    location ~ ^/libImage/*.*$ {' . "\n";
$new_conf .= '        root   /usr/sausalito/ui/web/;' . "\n";
$new_conf .= '    }' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # Error pages setup:' . "\n";
$new_conf .= '    error_page  401             /error/401-authorization.html;' . "\n";
$new_conf .= '    error_page  403             /error/403-forbidden.html;' . "\n";
$new_conf .= '    error_page  404             /error/404-file-not-found.html;' . "\n";
$new_conf .= '    error_page  500 503 504     /error/500-internal-server-error.html;' . "\n";
$new_conf .= '    error_page  502             /error/502-bad-gateway.html;' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '}' . "\n";
$new_conf .= '' . "\n";

# Edit the file:
if(!Sauce::Util::editfile($nginx_conf, *cfg_printer)) {
    &debug_msg("Failed to edit $nginx_conf through nginx_defaults.pl \n");
    $cce->bye('FAIL', '[[base-nginx.cantEditCfg]]');
    exit(1);
}
else {
    &debug_msg("Editing $nginx_conf through nginx_defaults.pl - DONE \n");
    system("/usr/bin/chmod 644 $nginx_conf");
}

$new_conf = '#' . "\n";
$new_conf .= '# Do NOT edit this file. The GUI will replace this file on edits.' . "\n";
$new_conf .= '# Custom edits need to go into separate config files in one of' . "\n";
$new_conf .= '# the separate include directories under /etc/nginx/' . "\n";
$new_conf .= '#' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    ssl_session_timeout ' . $Nginx->{ssl_session_timeout} . ';' . "\n";
$new_conf .= '    ssl_session_cache shared:TLS:' . $Nginx->{ssl_session_cache} . ';' . "\n";
$new_conf .= '    ssl_session_tickets ' . $Nginx->{ssl_session_tickets} . ';' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    resolver ' . $resolver_line . ' valid=' . $Nginx->{resolver_valid} . ';' . "\n";
$new_conf .= '    resolver_timeout ' . $Nginx->{resolver_timeout} . ';' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    # OCSP stapling' . "\n";
$new_conf .= '    ssl_stapling ' . $Nginx->{ssl_stapling} . ';' . "\n";
$new_conf .= '    ssl_stapling_verify ' . $Nginx->{ssl_stapling_verify} . ';' . "\n";
$new_conf .= '' . "\n";
$new_conf .= '    ssl_dhparam /usr/share/ssl/certs/sendmail-2048.dh;' . "\n";
$new_conf .= '' . "\n";

# Edit the file:
if(!Sauce::Util::editfile($default_conf, *cfg_printer)) {
    &debug_msg("Failed to edit $default_conf through nginx_defaults.pl \n");
    $cce->bye('FAIL', '[[base-nginx.cantEditCfg]]');
    exit(1);
}
else {
    &debug_msg("Editing $default_conf through nginx_defaults.pl - DONE \n");
    system("/usr/bin/chmod 644 $default_conf");
}

$cce->bye('SUCCESS');
exit(0);

#
### Subroutines:
#

sub cfg_printer {
    ($in, $out) = @_;
    print $out $new_conf;
    return 1;
}

sub debug_msg {
    if ($DEBUG) {
        my $msg = shift;
        $user = $ENV{'USER'};
        setlogsock('unix');
        openlog($0,'','user');
        syslog('info', "$ARGV[0]: $msg");
        closelog;
    }
}

# 
# Copyright (c) 2018 Michael Stauber, SOLARSPEED.NET
# Copyright (c) 2018 Team BlueOnyx, BLUEONYX.IT
# All Rights Reserved.
# 
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright 
#    notice, this list of conditions and the following disclaimer in 
#    the documentation and/or other materials provided with the 
#    distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its 
#    contributors may be used to endorse or promote products derived 
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
# POSSIBILITY OF SUCH DAMAGE.
# 
# You acknowledge that this software is not designed or intended for 
# use in the design, construction, operation or maintenance of any 
# nuclear facility.
# 