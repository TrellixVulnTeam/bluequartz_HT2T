<?php
// $Id: 10_EmailSettings.php
//
// This extension handles email forwarding and vacation messages.
//
// If you came here to find an example for the AutoFeatures of type
// 'UserExtraServices', then please note this: THIS module is ugly.
// It doesn't really conform to UIFC standards, as all the form 
// fields (except for the final one) are done via uifc_ng_helper.php
// Which itself is a dirty hack that was created before the UIFC
// Classes had been ported to 520XR. So I took shortcuts, which
// were removed from all other pages and modules as soon as I had
// proper UIFC classes created. However, the appearance of the
// email forwarding and vacation message page from the old GUI is
// very hard to replicate in the new GUI. Even with all the proper
// UIFC classes now in place. Hence this one here still uses the
// somewhat dirty uifc_ng_helper.php, but you shouldn't. If you
// intend to create a 'UserExtraServices' extension yourself, use
// the general format of this module as example, but pretty please:
// Do yourself a favour and use proper UIFC. Thanks!

include_once('UIExtension.php');

class EmailSettingsExtension extends UIExtension {
    function display(&$serverScriptHelper, &$container, $prams) {
        $CI =& get_instance();
        $factory = $serverScriptHelper->getHtmlComponentFactory('base-user');
        $cceClient = $serverScriptHelper->getCceClient();
        $pageId = 'EmailSettings';

        // Get the User related Objects of interest:
        $user = $cceClient->get($prams['CCE_OID']);
        $userEmail = $cceClient->get($prams['CCE_OID'], "Email");

        // Get $sessionId:
        $sessionId = $CI->BX_SESSION['sessionId'];

        $i18n = new I18n("base-user", $CI->BX_SESSION['loginUser']['localePreference']);

        //---
        // Get data for the Vsite:
        $vsite = $cceClient->getObject('Vsite', array('name' => $user['site']));

        // Prefered Email Domain Alias field:
        $user_mailAliases = $cceClient->scalar_to_array($userEmail['aliases']);
        if (!in_array($user['name'], $user_mailAliases)) {
            $user_mailAliases[] = $user['name'];
        }
        if (count($user_mailAliases) > "0") {
            asort($user_mailAliases);
            // Build the MultiChoice selector:
            $prefered_ualias_select = $factory->getMultiChoice("prefUserAlias", array_values($user_mailAliases));
            $pref_ualias_file = '~' . $user["name"] . '/.prefEmailAlias';
            $ret = $serverScriptHelper->shell("/bin/cat $pref_ualias_file", $pref_ualias, 'root', $sessionId);
            $pref_ualias = substr($pref_ualias, 0, -1);
            if (isset($pref_ualias)) {
                if (in_array($pref_ualias, array_values($user_mailAliases))) {
                    $prefered_ualias_select->setSelected($pref_ualias, true);
                }
                else {
                    $prefered_ualias_select->setSelected($user['name'], true);
                }
            }
            else {
                $prefered_ualias_select->setSelected($user['name'], true);
            }
        }

        // Prefered Email User Alias field:
        $vsite_mailAliases = $cceClient->scalar_to_array($vsite['mailAliases']);
        if (!in_array($vsite['fqdn'], $vsite_mailAliases)) {
            $vsite_mailAliases[] = $vsite['fqdn'];
        }
        if (count($vsite_mailAliases) > "0") {
            asort($vsite_mailAliases);
            // Build the MultiChoice selector:
            $prefered_alias_select = $factory->getMultiChoice("prefDomAlias", array_values($vsite_mailAliases));
            $pref_alias_file = '~' . $user["name"] . '/.prefEmailDomain';
            $ret = $serverScriptHelper->shell("/bin/cat $pref_alias_file", $pref_alias, 'root', $sessionId);            
            $pref_alias = substr($pref_alias, 0, -1);
            if (isset($pref_alias)) {
                if (in_array($pref_alias, array_values($vsite_mailAliases))) {
                    $prefered_alias_select->setSelected($pref_alias, true);
                }
                else {
                    $prefered_alias_select->setSelected($vsite['fqdn'], true);
                }
            }
            else {
                $prefered_alias_select->setSelected($vsite['fqdn'], true);
            }
        }

        // Only show this element if the user is member of a Vsite:
        if (isset($vsite['name'])) {
            // Show the pulldowns for the prefered alias:
            if ((count($user_mailAliases) > "0") && (count($vsite_mailAliases) > "0")) {
                $PrefAliasComplete = $factory->getTextField("PrefAliasComplete", '', 'r');
                $PrefAliasComplete->setLabelType("label_top no_lines");
                $prefered_ualias_select->setLabelType("label_top no_lines");
                $spacer = $factory->getTextField("spacer", '@', 'r');
                $spacer->setLabelType("label_top no_lines");
                $prefered_alias_select->setLabelType("label_top no_lines");
                $fqdn =& $factory->getCompositeFormField(array($PrefAliasComplete, $prefered_ualias_select, $spacer, $prefered_alias_select));
                $fqdn->setColumnWidths(array('col_25', 'col_25', 'col_50'));
                $container->addFormField(
                        $fqdn,
                        $factory->getLabel("[[base-user.PrefAliasComplete]]"),
                        $pageId
                        );
            }

            $name = "PrefAliasComplete";
            $helptext = $i18n->getWrapped("[[base-user.PrefAliasComplete_help]]");
            $optional_text = "";
        }
        //---

        // Line up the Ducks:
        $forwardSaveField = $userEmail['forwardSave'];
        $forwardEnableField = $userEmail['forwardEnable'];
        $autoResponderField = $userEmail['vacationOn'];

        if ($autoResponderField == "1") {
            $autoResponderField = "1";
            $autoResponderField_checked = " checked";
        }
        else {
            $autoResponderField = "0";
            $autoResponderField_checked = "";
        }

        if (!$userEmail['vacationMsgStart']) {
            $vacationMsgStart = time();
        }
        else {
            $vacationMsgStart = $userEmail['vacationMsgStart'];
        }
        if (!$userEmail['vacationMsgStop']) {
            $vacationMsgStop = time();
        }
        else {
            $vacationMsgStop = $userEmail['vacationMsgStop'];
        }

        // Show form based on CODB data:
        $forwardEmailField = $userEmail["forwardEmail"];
        $vacationMsg = $userEmail['vacationMsg'];

        // Assemble page_body:

        $name = "autoResponderField";
        $helptext = $i18n->getWrapped("[[base-user.autoResponderField_help]]");
        $optional_text = "";
        $name_opt1 = "enableAutoResponderField";
        $my_name_opt1 = $i18n->get("[[base-user.enableAutoResponderField]]");
        $help_opt1 = $i18n->getWrapped("[[base-user.autoResponderField_help]]");

        $autoRespondStartDate = $i18n->get("[[base-user.autoRespondStartDate]]");
        $autoRespondStartDate_help = $i18n->getWrapped("[[base-user.autoRespondStartDate_help]]");

        $autoRespondStopDate = $i18n->get("[[base-user.autoRespondStopDate]]");
        $autoRespondStopDate_help = $i18n->getWrapped("[[base-user.autoRespondStartDate_help]]");

        $autoRespondStartTime = $i18n->get("[[base-user.autoRespondStartTime]]");
        $autoRespondStartTime_help = $i18n->getWrapped("[[base-user.autoRespondStartTime_help]]");

        $autoRespondStoptTime = $i18n->get("[[base-user.autoRespondStoptTime]]");
        $autoRespondStoptTime_help = $i18n->getWrapped("[[base-user.autoRespondStoptTime_help]]");

        $autoResponderMessageField = $i18n->get("[[base-user.autoResponderMessageField]]");
        $autoResponderMessageField_help = $i18n->getWrapped("[[base-user.autoResponderMessageField_help]]");

        // Make vacation message charsetsafe:
        $vacationMsg = Utf8Encode($vacationMsg);

        // Timepicker select options:
        $hour_options = array(
                          '01'  => '01',
                          '02'  => '02',
                          '03'  => '03',
                          '04'  => '04',
                          '05'  => '05',
                          '06'  => '06',
                          '07'  => '07',
                          '08'  => '08',
                          '09'  => '09',
                          '10'  => '10',
                          '11'  => '11',
                          '12'  => '12'
                        );

        $minute_options = array(
                          '00'  => '00',
                          '15'  => '15',
                          '30'  => '30',
                          '45'  => '45'
                        );

        $ampm_options = array(
                          'am'  => 'am',
                          'pm'  => 'pm'
                        );

        // Get form friendly start date and time:
        $form_start_date = strftime("%F",$vacationMsgStart);
        $form_end_date = strftime("%F",$vacationMsgStop);

        $form_start_time = strftime("%I %M %S %P",$vacationMsgStart);
        $form_end_time = strftime("%I %M %S %P",$vacationMsgStop);

        if (preg_match('/AM$/', date('h:i A',$vacationMsgStart))) {
            $start_is_am = "am";
        }
        else {
            $start_is_am = "pm";
        }
        if (preg_match('/AM$/', date('h:i A',$vacationMsgStop))) {
            $stop_is_am = "am";
        }
        else {
            $stop_is_am = "pm";
        }

        // Yeah, this is *really* ugly. I know. But does it really make sense to build a class
        // or to modify a class so that it can display this stuff the way it want? It is not
        // really worth the effort, so we can afford to do it this way:
        $mikes_folly = addToggleAbleAutoGrowField("forwardEnableField", "fq_email_address_or_username_multiline", "notrequired", "forwardEnable", "forwardSaveField", $forwardEnableField, $forwardSaveField, "forwardEmailField", "forwardEmailField_rule", "", $forwardEmailField, "base-user", $i18n, $cceClient) .
                    '
                    <div class="columns">
                            <fieldset class="label_side col_25 no_lines">
                                <div class="section">
                                    <label for="' . $name . '" title="' . $helptext . '" class="tooltip right">' . $i18n->get("[[base-user.autoResponderField]]") . '<span>' . $optional_text . '</span></label>
                                </div>
                            </fieldset>
                        <div class="col_25">
                            <div class="section">
                                <fieldset class="label_top bottom no_lines">
                                        <INPUT TYPE="HIDDEN" NAME="checkbox-' . $name_opt1 . '" VALUE="' . $autoResponderField . '">
                                        <div class="uniform inline clearfix">
                                                <label for="' . $name_opt1 . '" title="' . $help_opt1 . '" class="tooltip hover"><input type="checkbox" class="mcb-' . $name_opt1 . '" name="' . $name_opt1 . '" id="' . $name_opt1 . '"' . $autoResponderField_checked . '/>'. $my_name_opt1 .'</label>
                                        </div>
                                </fieldset>
                            </div>
                        </div>
                        <div class="col_50">
                            <div class="section">
                               <fieldset class="label_side top right no_lines">
                                        <label for="' . $autoRespondStartDate . '" title="' . $autoRespondStartDate_help . '" class="tooltip top hover">' . $autoRespondStartDate . '</label>
                                        <div class="clearfix">
                                                <input type="text" name="autoRespondStartDate" class="datepicker" style="width:100px;" value="' . $form_start_date . '">
                                        </div>
                                </fieldset>
                                <fieldset class="label_side right no_lines">
                                        <label for="' . $autoRespondStartTime . '" title="' . $autoRespondStartTime_help . '" class="tooltip top hover">' . $autoRespondStartTime . '</label>

                                            <div class="clearfix time_picker_holder">' . 
                                            form_dropdown('hour_start', $hour_options, strftime("%I",$vacationMsgStart)) .
                                            form_dropdown('minute_start', $minute_options, minutes_round(strftime("%M",$vacationMsgStart), "15")) .
                                            form_dropdown('ampm_start', $ampm_options, $start_is_am) . '
                                            </div>

                                </fieldset>
                               <fieldset class="label_side top right no_lines">
                                        <label for="' . $autoRespondStopDate . '" title="' . $autoRespondStopDate_help . '" class="tooltip top hover">' . $autoRespondStopDate . '</label>
                                        <div class="clearfix">
                                                <input type="text" name="autoRespondStopDate" class="datepicker" style="width:100px;" value="' . $form_end_date . '">
                                        </div>
                                </fieldset>
                                <fieldset class="label_side right no_lines">
                                        <label for="' . $autoRespondStoptTime . '" title="' . $autoRespondStoptTime_help . '" class="tooltip top hover">' . $autoRespondStoptTime . '</label>

                                            <div class="clearfix time_picker_holder">' . 
                                            form_dropdown('hour_stop', $hour_options, strftime("%I",$vacationMsgStop)) .
                                            form_dropdown('minute_stop', $minute_options, minutes_round(strftime("%M",$vacationMsgStop), "15")) .
                                            form_dropdown('ampm_stop', $ampm_options, $stop_is_am) . '
                                            </div>

                                </fieldset> 
                                <fieldset class="label_top no_lines lesspadding">
                                    <label for="' . $autoResponderMessageField . '" title="' . $autoResponderMessageField_help . '" class="tooltip">' . $autoResponderMessageField . '<span></span></label>
                                        <div class="clearfix">
                                            <textarea name="textarea-vacationMsg" title="' . $i18n->get("[[palette.autogrow_expanding]]") . '" class="tooltip autogrow" placeholder="' . $i18n->get("[[palette.autogrow_prefill]]") . '">' . $vacationMsg . '</textarea>
                                        </div>
                                    </span>
                                </fieldset>
                            </div>
                        </div>
                    </div>';

        // Push the folly out:
        $container->addFormField(
            $factory->getRawHTML("folly", $mikes_folly),
            $factory->getLabel("folly"),
            $pageId
        );
    }

    function handle(&$serverScriptHelper, &$errors, $prams) {

        // Make CI instance available:
        $CI =& get_instance();

        $cceClient = $serverScriptHelper->getCceClient();

        $i18n = $prams['i18n'];

        // Get $sessionId and $loginName from Cookie (if they are set):
        $sessionId = $CI->BX_SESSION['sessionId'];
        $loginName = $CI->BX_SESSION['loginName'];

        // Get form data:
        $form_data = $CI->input->post(NULL, TRUE);

        //Set up rules for form validation. These validations happen before we submit to CCE and further checks based on the schemas are done:
        $CI->form_validation->set_rules('forwardEmailField', $i18n->get("[[forwardEmailField]]"), 'trim|xss_clean');
        $CI->form_validation->set_rules('autoRespondStartDate', $i18n->get("[[autoRespondStartDate]]"), 'trim|xss_clean');
        $CI->form_validation->set_rules('vacationMsg', $i18n->get("[[vacationMsg]]"), 'trim|xss_clean');

        //Setting up error messages:
        $CI->form_validation->set_message('required', $i18n->get("[[palette.val_is_required]]", false, array("field" => "\"%s\"")));

        // Empty array for key => values we want to submit to CCE:
        $attributes = array();

        // Form fields that are required to have input:
        $required_keys = array('autoRespondStartDate', 'autoRespondStopDate');

        // Items we do NOT want to submit to CCE:
        $ignore_attributes = array("BlueOnyx_Info_Text");
        if (is_array($form_data)) {

            // Function GetFormAttributes() walks through the $form_data and returns us the $parameters we want to
            // submit to CCE. It intelligently handles checkboxes, which only have "on" set when they are ticked.
            // In that case it pulls the unticked status from the hidden checkboxes and addes them to $parameters.
            // It also transformes the value of the ticked checkboxes from "on" to "1". 
            //
            // Additionally it generates the form_validation rules for CodeIgniter.
            //
            // params: $i18n                i18n Object of the error messages
            // params: $form_data           array with form_data array from CI
            // params: $required_keys       array with keys that must have data in it. Needed for CodeIgniter's error checks
            // params: $ignore_attributes   array with items we want to ignore. Such as Labels.
            // return:                      array with keys and values ready to submit to CCE.
            $attributes = GetFormAttributes($i18n, $form_data, $required_keys, $ignore_attributes);
        }
        // Do we have validation related errors?
        if ($CI->form_validation->run() == FALSE) {

            if (validation_errors()) {
                // Set CI related errors:
                $ci_errors = array(validation_errors('<div class="alert dismissible alert_red"><img width="40" height="36" src="/.adm/images/icons/small/white/alarm_bell.png"><strong>', '</strong><br><br></div>'));
            }           
            else {
                // No errors. Pass empty array along:
                $ci_errors = array();
            }
            $errors = array_merge($errors, $ci_errors);
        }

        //
        //--- Own error checks:
        //

        if ($CI->input->post(NULL, TRUE)) {

            $my_errors = array();

            $user = $cceClient->get($prams['CCE_OID']);
            $userEmail = $cceClient->get($prams['CCE_OID'], "Email");
            $vsite = $cceClient->getObject('Vsite', array('name' => $user['site']));

            // Only perform this transaction if the user is member of a Vsite:
            if (isset($vsite['name'])) {

                if (isset($attributes['prefUserAlias'])) {
                    $alias_check = $cceClient->scalar_to_array($userEmail['aliases']);
                    $unamePart = $user['name'];
                    $groupPart = $user['site'];
                    if (!in_array($attributes['prefUserAlias'], $alias_check)) {
                        $ret = $serverScriptHelper->shell("/bin/rm -f ~$unamePart/.prefEmailAlias", $output, 'root', $sessionId);
                    }
                    else {
                        // Create a unique temporary file name:
                        $tempnameShort = tempnam("/tmp/", $unamePart . "_prefUserAlias");
                        $tempname =  $tempnameShort . ".tmp";
                        // Write as temporary file:
                        write_file($tempname, $attributes['prefUserAlias']);
                        // Move it to the right location and delete the temporary files:
                        $ret = $serverScriptHelper->shell("/bin/cp $tempname ~$unamePart/.prefEmailAlias", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/chmod 00644 ~$unamePart/.prefEmailAlias", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/chown $unamePart:$groupPart ~$unamePart/.prefEmailAlias", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/rm -f $tempname", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/rm -f $tempnameShort", $output, 'root', $sessionId);
                    }
                }
                if (isset($attributes['prefDomAlias'])) {
                    $vsite_alias_check = $cceClient->scalar_to_array($vsite['mailAliases']);
                    $unamePart = $user['name'];
                    $groupPart = $user['site'];
                    if (!in_array($attributes['prefDomAlias'], $vsite_alias_check)) {
                        $ret = $serverScriptHelper->shell("/bin/rm -f ~$unamePart/.prefEmailDomain", $output, 'root', $sessionId);
                    }
                    else {
                        // Create a unique temporary file name:
                        $tempnameShort = tempnam("/tmp/", $unamePart . "_prefDomAlias");
                        $tempname =  $tempnameShort . ".tmp";
                        // Write as temporary file:
                        write_file($tempname, $attributes['prefDomAlias']);
                        // Move it to the right location and delete the temporary files:
                        $ret = $serverScriptHelper->shell("/bin/cp $tempname ~$unamePart/.prefEmailDomain", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/chmod 00644 ~$unamePart/.prefEmailDomain", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/chown $unamePart:$groupPart ~$unamePart/.prefEmailDomain", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/rm -f $tempname", $output, 'root', $sessionId);
                        $ret = $serverScriptHelper->shell("/bin/rm -f $tempnameShort", $output, 'root', $sessionId);
                    }
                }
            }

            // Without email address we neither forward nor activate 'save a copy':
            if (($attributes['forwardEnable'] == "1") || ($attributes['forwardSaveField'] == "1")) {
                if ($attributes['forwardEmailField'] == "") {
                    $attributes['forwardEnable'] = '0';
                    $attributes['forwardSaveField'] = '0';
                }
            }

            // Assemble start and stoptime into Unix format:
            if ($attributes["ampm_start"] == "pm") {
                $attributes["hour_start"] = $attributes["hour_start"] + 12; 
            } 

            if ($form_data["ampm_stop"] == "pm") { 
                $attributes["hour_stop"] = $attributes["hour_stop"] + 12; 
            } 

            $start_date = explode("-", $attributes["autoRespondStartDate"]);
            $end_date = explode("-", $attributes["autoRespondStopDate"]);
            $vacationMsgStart = mktime($attributes["hour_start"], $attributes["minute_start"], "00", $start_date[1], $start_date[2], $start_date[0]); 
            $vacationMsgStop = mktime($attributes["hour_stop"], $attributes["minute_stop"], "00", $end_date[1], $end_date[2], $end_date[0]); 

            // Error: End date before start date:
            if (($vacationMsgStop - $vacationMsgStart) < 0) { 
                $my_errors[] = '<div class="alert dismissible alert_red"><img width="40" height="36" src="/.adm/images/icons/small/white/alarm_bell.png"><strong>' . $i18n->get("[[base-user.invalidVacationDate]]") . '</strong></div>';
            } 

            // Error: Vacation message enabled, but no message set:
            if (($attributes['enableAutoResponderField'] == "1") && (!isset($attributes["vacationMsg"]))) { 
                $my_errors[] = '<div class="alert dismissible alert_red"><img width="40" height="36" src="/.adm/images/icons/small/white/alarm_bell.png"><strong>' . $i18n->get("[[base-user.blank-vacation-msg]]") . '</strong></div>';
            }
            $errors = array_merge($errors, $my_errors);
        }

        // Special case: If user is disabled, forwarding WILL be off:
        $user = $cceClient->get($prams['CCE_OID']);
        if ($user['ui_enabled'] == "0") {
            $attributes['forwardEnable'] = "0";
        }

        // No errors? Submit to CODB:
        if (count($errors) == "0") {
            $fwEmailField = $cceClient->scalar_to_array($attributes['forwardEmailField']);
            $outFW_email = array();
            foreach ($fwEmailField as $addy) {
                if ((!filter_var($addy, FILTER_VALIDATE_EMAIL)) && (!preg_match('/^[a-z][a-z0-9_.-]{0,30}$/', $addy))) {
                    next;
                }
                else {
                    $outFW_email[] = $addy;
                }
            }
            // Assemble the data we want to submit:
            $CODBout = array("forwardEnable" => $attributes['forwardEnable'], 
                            "forwardEmail" => $cceClient->array_to_scalar($outFW_email),
                            "forwardSave" => $attributes['forwardSaveField'],
                            "vacationOn" => $attributes['enableAutoResponderField'],
                            "vacationMsg" => $attributes["vacationMsg"],
                            "vacationMsgStart" => $vacationMsgStart,
                            "vacationMsgStop" => $vacationMsgStop
                            );

            // Actual submit to CODB:
            $cceClient->set($prams['CCE_OID'], "Email", $CODBout);
            $errors = array_merge($errors, $cceClient->errors());
        }
    }
}

/*
Copyright (c) 2016 Michael Stauber, SOLARSPEED.NET
Copyright (c) 2016 Team BlueOnyx, BLUEONYX.IT
Copyright (c) 2008 Brian Smith, NuOnce Networks, Inc.
All Rights Reserved.

1. Redistributions of source code must retain the above copyright 
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright 
   notice, this list of conditions and the following disclaimer in 
   the documentation and/or other materials provided with the 
   distribution.

3. Neither the name of the copyright holder nor the names of its 
   contributors may be used to endorse or promote products derived 
   from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.

You acknowledge that this software is not designed or intended for 
use in the design, construction, operation or maintenance of any 
nuclear facility.

*/
?>