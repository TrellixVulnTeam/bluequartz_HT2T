.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AliasFile 3"
.TH AliasFile 3 "2000-05-02" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Unix::AliasFile \- Perl interface to /etc/aliases format files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Unix::AliasFile;
.Ve
.PP
.Vb 8
\&  $al = new Unix::AliasFile "/etc/aliases";
\&  $al->alias("bozos", @members);
\&  $al->delete("deadlist");
\&  $al->remove_user("coolmail", "bgates", "badguy");
\&  $al->add_user("coolmail", "joecool", "goodguy");
\&  $al->remove_user("*", "deadguy");
\&  $al->commit();
\&  undef $al;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Unix::AliasFile module provides an abstract interface to Unix alias files.
It automatically handles file locking, getting colons and commas in the right
places, and all the other niggling details.
.PP
Unlike some of the other Unix::*File modules, this module will preserve the
order of your alias file, with a few exceptions.  Comments and aliases will
appear in the file in the same order that they started in, unless you have
comment lines interspersed between the beginning of an alias and continuation
lines for that same alias.  In this case, those comments will appear after the
alias that contains them.
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "add_user( \s-1ALIAS\s0, @USERS )"
.el .Sh "add_user( \s-1ALIAS\s0, \f(CW@USERS\fP )"
.IX Subsection "add_user( ALIAS, @USERS )"
This method will add the list of users to an existing alias.  Users that are
already members of the alias are silently ignored.  The special alias name *
will add the users to every alias.  Returns 1 on success or 0 on failure.
.Sh "alias( \s-1ALIAS\s0 [,@USERS] )"
.IX Subsection "alias( ALIAS [,@USERS] )"
This method can add, modify, or return information about an alias.  Supplied
with a single alias parameter, it will return a list consisting of the members
of that alias, or undef if no such alias exists.  If you supply more
parameters, the named alias will be created or modified if it already exists.
The member list is also returned to you in this case.
.Sh "aliases( )"
.IX Subsection "aliases( )"
This method returns a list of all existing aliases.  The list will be sorted
in alphabetical order.  In scalar context, this method returns the total
number of aliases.
.Sh "comment( \s-1ALIAS\s0, \s-1COMMENT\s0 )"
.IX Subsection "comment( ALIAS, COMMENT )"
This method inserts a comment line before the specified alias.  You must
supply your own comment marker (#) but a newline will be automatically
appended to the comment unless it already has one.  Returns 1 on success
and 0 on failure.
.Sh "commit( [\s-1BACKUPEXT\s0] )"
.IX Subsection "commit( [BACKUPEXT] )"
See the Unix::ConfigFile documentation for a description of this method.
.Sh "delempty( )"
.IX Subsection "delempty( )"
This method will delete all existing aliases that have no members.  It returns
a count of how many aliases were deleted.
.Sh "delete( \s-1ALIAS\s0 )"
.IX Subsection "delete( ALIAS )"
This method will delete the named alias.  It has no effect if the supplied
alias does not exist.
.Sh "new( \s-1FILENAME\s0 [,OPTIONS] )"
.IX Subsection "new( FILENAME [,OPTIONS] )"
See the Unix::ConfigFile documentation for a description of this method.
.ie n .Sh "remove_user( \s-1ALIAS\s0, @USERS )"
.el .Sh "remove_user( \s-1ALIAS\s0, \f(CW@USERS\fP )"
.IX Subsection "remove_user( ALIAS, @USERS )"
This method will remove the list of users from an existing alias.  Users that
are not members of the alias are silently ignored.  The special alias name *
will remove the users from every alias.  Returns 1 on success or 0 on failure.
.Sh "rename_user( \s-1OLDNAME\s0, \s-1NEWNAME\s0 )"
.IX Subsection "rename_user( OLDNAME, NEWNAME )"
This method will change one username to another in every alias.  Returns the
number of aliases affected.
.Sh "uncomment( \s-1COMMENT\s0 )"
.IX Subsection "uncomment( COMMENT )"
Remove the comment from the file that matches the supplied text.  The match
must be exact.  Returns 1 on success and 0 on failure.
.SH "BUGS"
.IX Header "BUGS"
While the Unix::AliasFile module will work with Perl versions prior to 5.005,
it may exhibit a minor bug under those versions.  The bug will cause program
aliases with embedded comma characters to be broken apart.  This will not
happen under 5.005 and up, due to the use of the Text::ParseWords module,
which changed significantly with the 5.005 release.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Snodgrass, ssnodgra@fore.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Unix::AutomountFile, Unix::ConfigFile, Unix::GroupFile, Unix::PasswdFile
