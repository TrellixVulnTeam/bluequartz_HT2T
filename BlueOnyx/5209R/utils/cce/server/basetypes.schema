<!--
	$Id: basetypes.schema
	Copyright (c) 2014 Michael Stauber, SOLARSPEED.NET
	Copyright (c) 2014 Team BlueOnyx, BLUEONYX.IT
	Copyright (c) 2003 Sun Microsystems, Inc. 
	All Rights Reserved.

	Sample and simple working multiline regexp as example:
	^(LOGIN|PLAIN)$|^(((LOGIN|PLAIN)([,]|[\\r\\n]){0,1}){0,999})$

-->
<SCHEMA NAME =		"Base Datatypes"
	VENDOR =	"BlueOnyx"
	VERSION =	"2.1"
>

<!-- These are the standard typedefs understood by the system -->

<!-- Scalar is any data -->
<typedef name="scalar" 		type="re" 	data="^.*$"/>

<!-- Word is any non-whitespace data -->
<typedef name="word" 		type="re" 	data="^[^ \t\n\r\v\f]+$"/>

<!-- Alphanum is any alphanumeric data -->
<typedef name="alphanum" 	type="re" 	data="^[A-Za-z0-9]+$"/>

<!-- memdisk is any alphanumeric data plus a unit (K, KB, M, MB, G, GB, T, TB) -->
<typedef name="memdisk" 	type="re" 	data="^([0-9]{1,9})((K)||(KB)||(M)||(MB)||(G)||(GB)||(T)||(TB))+$"/>


<!-- alphanum_plus is alphanumeric data plus a "safe" subset of punctuation -->
<typedef
	name="alphanum_plus"
	type="re"
	data="^[A-Za-z0-9\\._-]+$"
/>

<!-- alphanum_plus_multiline is alphanumeric data plus a "safe" subset of punctuation for use in textareas -->
<typedef
	name="alphanum_plus_multiline"
	type="re"
	data="^([A-Za-z0-9\\._-]{2,})(([,]|[\\r\\n])[A-Za-z0-9\\._-]{2,})*$"
/>

<!-- alphanum_plus_space is alphanumeric data plus a "safe" subset of punctuation, spaces and selected unicode characters-->
<typedef
	name="alphanum_plus_space"
	type="re"
	data="^[A-Za-z0-9&àáâäãåèéêëìíîïòóôöõøùúûüÿýñçčšžÀÁÂÄÃÅÈÉÊËÌÍÎÏÒÓÔÖÕØÙÚÛÜŸÝÑßÇŒÆČŠŽ∂ð\\._-\s]+$"
/>

<!-- Int is a signed integer -->
<typedef name="int" 		type="re" 	data="^((\-?[1-9][0-9]*)|0)$"/>

<!-- Uint is an unsigned integer -->
<typedef name="uint" 		type="re" 	data="^(([1-9][0-9]*)|0)$"/>

<!-- Boolean is "0" for FALSE, "1" for TRUE -->
<typedef name="boolean" 	type="re" 	data="^(0|1)$"/>

<!-- Catches IPv4 and IPv6 IPs: http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses -->
<typedef name="ipaddrIPv4IPv6" 		type="re" 	
	data="^(((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$"
/>

<!-- Catches IPv6 IPs: http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses -->
<typedef name="ipaddrIPv6" 		type="re" 	
	data="^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
/>	

<!-- Catched *just* IPv4 IP's: -->
<typedef name="ipaddr" 		type="re" 	
	data="^(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])$"
/>

<typedef name="ipaddr_list" 		type="re" 	
	data="^(((([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9]))))(([,]|[\\r\\n])((([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9]))))*$"
/>

<!-- defines a network, such as "10.9.0.0/16" -->
<typedef name="network" 		type="re" 	
	data="^(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])/([1-9]|[12][0-9]|3[0-2])$"
/>

<typedef 
  name="email_address" 
  type="re" 
  data="^[a-zA-Z0-9\\._-]+\@[a-zA-Z0-9\\._-]+$"
/>

<typedef 
  name="email_addresses" 
  type="re" 
  data="^(.+@[^\\.].*\\.[a-z]{2,})(([,]|[\\r\\n]).+@[^\\.].*\\.[a-z]{2,})*$"
/>

// NetAddress is a combination of:
// domainname
// fqdn
// ipaddr
<typedef name="NetAddress" type="re" 
  data="(^[A-Za-z0-9][A-Za-z0-9\-]*([\\.][A-Za-z0-9][A-Za-z0-9\-]*)*$)|(^([A-Za-z0-9][A-Za-z0-9\-]*\\.)+[A-Za-z]+$)|(^(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])$)"
/>

// Multiple NetAddresses - as good as it gets:
<typedef name="NetAddresses" type="re" 
  data="^((([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])|(([a-z0-9][a-z0-9\-]*\\.)+[a-z]+))$|^((((([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])|(([a-z0-9][a-z0-9\-]*\\.)+[a-z]+))([,]|[\\r\\n]){0,1}){0,999})$"
/>

// Single IP-Addresses with Netmask:
<typedef name="InetAddress" type="re" 
	data="^(((([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[\\.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])))\\/([1-9]|[12][0-9]|3[0-2]))*$"
/>

// Multiple IP-Addresses with Netmask:
<typedef name="InetAddressList" type="re" 
	data="^(((([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[\\.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])))\\/([1-9]|[12][0-9]|3[0-2]))(([,]|[\\r\\n])((([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[\\.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])))\\/([1-9]|[12][0-9]|3[0-2]))*$"
/>

<!-- netmask can either be a number from 1 to 32 or a dot-quaded ip mask: -->
<typedef name="netmask" type="re" 
  data="^(([1-9])|([12][0-9])|(3[0-2])|((0|128|192|224|240|248|252|254|255)\\.0\\.0\\.0)|255\\.((0|128|192|224|240|248|252|254|255)\\.0\\.0)|255\\.255\\.((0|128|192|224|240|248|252|254|255)\\.0)|255\\.255\\.255\\.((0|128|192|224|240|248|252|254|255)))$"
/>

<typedef name="fqdn" type="re"
  data="^([a-z0-9][a-z0-9\-]*\\.)+[a-z]+$"
/>

<typedef name="fqdnPlusWildcard" type="re"
  data="^(((([_a-z0-9]|[_a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[_a-z0-9][a-z0-9\-]*[a-z0-9]))|(^\\*))\\.[a-z0-9][a-z0-9\-]*([\\.][a-z0-9][a-z0-9\-]*)*$" 
/>

<typedef name="hostname" type="re"
  data="^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$"  
/>

<typedef name="hostnamePlusWildcard" type="re"
  data="(^(([_a-z0-9]|[_a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[_a-z0-9][a-z0-9\-]*[a-z0-9])$)|(^\\*$)"
/>

<typedef name="domainname" 	type="re"
  data="^[a-z0-9][a-z0-9\-]*([\\.][a-z0-9][a-z0-9\-]*)*$"
/>

<!-- Not Yet perfect, but this will do for now: -->
<typedef name="domainnames" 	type="re"
  data="((^[a-z0-9][a-z0-9\-]*([\\.][a-z0-9][a-z0-9\-]*))|([a-z0-9][a-z0-9\-]*([\\.][a-z0-9][a-z0-9\-]*)([,]|[\r\n]{0,999})))$"
/>

<typedef
	name="password"
	type="re"
	data="^[^\001-\037\177]{6,24}$"
/>

<typedef 
	name="AuthProtos" 
	type="re" 
	data="(LOGIN|PLAIN|CRAM-MD5|OAUTH)"/>

<typedef 
    name="IMAPtype" 
    type="re" 
    data="(IMAP|SSL|TLS)"/>

<typedef 
  name="fq_email_address_or_username" 
  type="re" 
  data="(^[a-zA-Z0-9\\._-]+\@[a-zA-Z0-9\\._-]+$)|(^[A-Za-z0-9\\._-]+$)"
  errmsg = "[[base-cce.fq_email_address_or_username_errmsg]]"
/>

<!-- Not Yet perfect, but this will do for now: -->
<typedef 
    name="IP_or_FQDN" 
    type="re" 
    data="(^([a-z0-9][a-z0-9\-]*\\.)+[a-z]+$)|(^(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])\\.(([0-9])|([1-9][0-9])|(1[0-9][0-9])|2[0-4][0-9]|25[0-5])$)"/>

</SCHEMA>

<SCHEMA NAME =		"Base Security Rules"
	VENDOR =	"BlueOnyx"
	VERSION =	"1.1"
>
<rule	name="ruleAdmin"
	type="builtin"
	data="rule_sysadmin"
/>
<rule	name="ruleAll"
	type="builtin"
	data="rule_all"
/>
<rule	name="ruleUser"
	type="builtin"
	data="rule_user"
/>
<rule	name="ruleSelf"
	type="builtin"
	data="rule_self"
/>
<!-- Takes one argument - the name of the capability to check -->
<rule	name="ruleCapable"
	type="builtin"
	data="rule_capable"
/>
</SCHEMA>


<SCHEMA NAME =		"Base Sorting and Matching"
	VENDOR =	"BlueOnyx"
	VERSION =	"1.0"
>
<matchtype	name="ascii"
		type="builtin"
		data="ascii_compare"
/>
<matchtype	name="old_numeric"
		type="builtin"
		data="old_numeric_compare"
/>
<matchtype	name="locale"
		type="builtin"
		data="locale_compare"
/>
<matchtype	name="ip"
		type="builtin"
		data="ip_compare"
/>
<matchtype	name="hostname"
		type="builtin"
		data="hostname_compare"
/>
</SCHEMA>
