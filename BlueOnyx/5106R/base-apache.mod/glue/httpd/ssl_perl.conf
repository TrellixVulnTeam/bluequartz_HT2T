# let's assume that base-ssl does the right thing, the key and cert files 
# should always be there.  If there not, someone was messing with
# things they obviously should not have been.
<Perl>
use Apache2::PerlSections();
use lib qw(/usr/sausalito/perl);
use CCE;
use Base::Httpd qw(httpd_get_vhost_conf_file);

my $cce = new CCE;
$cce->connectuds();

my @ssl_sites = $cce->find('Vsite', { 'SSL.enabled' => 1 }, { 'SSL.expires' => '^.+' });

# Only a temp variable until we go the whole hog.
my (@ssl_conf, $ip, $rewrite_rules, $proto, $ret, $config);

my ($oid) = $cce->find('System');
my ($ok, $obj) = $cce->get($oid);

# Get "System" . "Web":
my ($ok, $objWeb) = $cce->get($oid, 'Web');

# HTTP and SSL ports:
my $httpPort = "80";
if ($objWeb->{'httpPort'}) {
    $httpPort = $objWeb->{'httpPort'};
}
my $sslPort = "443";
if ($objWeb->{'sslPort'}) {
    $sslPort = $objWeb->{'sslPort'};
}

# HSTS:
my $HSTS = "0";
if ($objWeb->{'HSTS'}) {
    if ($objWeb->{'HSTS'} == "1") {
        $HSTS = "1";
    }
}

# O.K. What we bassically want to do is build up new section in the conf file
# for SSL sections.
for my $oid (@ssl_sites)
{
    my ($ok, $vsite) = $cce->get($oid);
    my $conf_file = httpd_get_vhost_conf_file($vsite->{name});

    open HTTPD_CONF, "<$conf_file" or die "Can't open $conf_file: $!\n";
   
    # reset
    @ssl_conf = ();
    %config = ();
    
    while(<HTTPD_CONF>) {
        if ( /^<VirtualHost ([\d\.]+):$httpPort>/o ) {
            $ip = $1;
            # skip everything before the VirtualHost entry since it doesn't need to be duplicated
            last;
        }
    }

    # read the rest
    while(<HTTPD_CONF>) {
        # These two are for the rewrite options
        s/http/https/go if (/^Rewrite/);
        s/$httpPort/$sslPort/go if (/^Rewrite/);
        s#https://$vsite->{fqdn}/#https://$vsite->{fqdn}:$sslPort/# if (/^RewriteRule/);
        push @ssl_conf, $_;

        # Hardcoded, issues with mod_perl and cobalt modules.
        if (/^<\/Virtual/ && (-f "$vsite->{basedir}/certs/certificate") && (-f "$vsite->{basedir}/certs/key")) 
        {
           push @Listen, "$ip:$sslPort";

           $VirtualHost{"$ip:$sslPort"}{'SSLengine'} = 'on';
            if (-f "$vsite->{basedir}/certs/ca-certs")
            {
              $VirtualHost{"$ip:$sslPort"}{'SSLCACertificateFile'} = "$vsite->{basedir}/certs/ca-certs";
            }

            # Support for GoDaddy certs through separate ca-chain residing in the Vsite's certs directory:
            if (-f "$vsite->{basedir}/certs/ca-chain") {
            $VirtualHost{"$ip:$sslPort"}{'SSLCertificateChainFile'} = "$vsite->{basedir}/certs/ca-chain";
            }

            $VirtualHost{"$ip:$sslPort"}{'SSLCertificateFile'} = "$vsite->{basedir}/certs/certificate";
            $VirtualHost{"$ip:$sslPort"}{'SSLCertificateKeyFile'} = "$vsite->{basedir}/certs/key";

            #### SSL Protocols and Ciphers:

            $VirtualHost{"$ip:$sslPort"}{'SSLProtocol'} = "+ALL -SSLv2 -SSLv3";
            $VirtualHost{"$ip:$sslPort"}{'SSLHonorCipherOrder'} = "On";
            $VirtualHost{"$ip:$sslPort"}{'SSLCipherSuite'} = "EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:+CAMELLIA256:+AES256:+CAMELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:CAMELLIA256-SHA:AES256-SHA:CAMELLIA128-SHA:AES128-SHA";

            if ($HSTS == "1") {
                $VirtualHost{"$ip:$sslPort"}{'Header add Strict-Transport-Security'} = "max-age=15768000";            
            }

            # Explanation: The fuckers at RedHat had crippled OpenSSL so that elliptic curve ciphers were missing.
            # They added some of them back recently. See: https://bugzilla.redhat.com/show_bug.cgi?id=319901
            # As far as Apache is concerned, the ECDHE ciphers *still* do not work. For that we would need Apache 2.4.
            #
            # What's worse: On CentOS5 we only have OpenSSL-0.9.8, so TLSv1.1 or TLSv1.2 are *not* available.
            # 
            # For securing HTTPS we want to achieve the following:
            # - Do not use weak or comprimised ciphers: OK (as best as possible)
            # - Use Strict Transport Security (HSTS): OK
            # - Support Forward Secrecy (PFS) for as many browsers as possible: OK, but fail for Internet Explorer.
            #
            # With ECDHE not available (which we'd need to get PFS working with IE browsers), we fall back to DHE,
            # which allows Forward Secrecy on all browsers. Execept the ones from Microsoft. It's the next best 
            # thing below ECDHE. 
            #
            # Most Microsoft browsers post Windows XP's IE will use either TLS_RSA_WITH_AES_256_CBC_SHA instead.
            # Chrome, Firefox, Opera and Safari will almost all use TLS_DHE_RSA_WITH_AES_256_CBC_SHA instead, which 
            # allows Forward Secrecy. Anything but IE6/XP, IE8/XP, Java 6u45 and Java 7u25 (which will use 168bit keys)
            # will use 256bit keys instead. 
            #
            # Protocols: Only IE6/XP would use SSLv3, which we disabled due to the 'Pootle'-vulnerability. So IE6/XP
            # users will no longer be able to connect. All the rest default to TLSv1.0 with no fallback option.
            # Sadly CentOS5's OpenSSL and Apache do not support TLSv1.2 or TLSv1.1, so they are not an option.
            #
            # Ciphers: RC4 and other weak ciphers have been disabled.
            #
            # Further reading: https://bettercrypto.org/static/applied-crypto-hardening.pdf

            ####

            foreach my $conf (@ssl_conf) {
                if ($conf =~ /^([^ ]+) (.+)/ && $conf !~ /^#/) {
                    $VirtualHost{"$ip:$sslPort"}{"$conf"} = "";
                }
            }
        }
    }
    close HTTPD_CONF;
}

$cce->bye('SUCCESS');

if (-f '/etc/DEBUG')
{
    use Data::Dumper;
    print Dumper(%VirtualHost);
    print STDERR Apache2::PerlSections->dump();
}
</Perl>
