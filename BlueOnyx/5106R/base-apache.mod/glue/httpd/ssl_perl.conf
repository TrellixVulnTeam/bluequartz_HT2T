# let's assume that base-ssl does the right thing, the key and cert files 
# should always be there.  If there not, someone was messing with
# things they obviously should not have been.
<Perl>
use Apache2::PerlSections();
use lib qw(/usr/sausalito/perl);
use CCE;
use Base::Httpd qw(httpd_get_vhost_conf_file);

my $cce = new CCE;
$cce->connectuds();

my @ssl_sites = $cce->find('Vsite', { 'SSL.enabled' => 1 }, { 'SSL.expires' => '^.+' });

# Only a temp variable until we go the whole hog.
my (@ssl_conf, $ip, $rewrite_rules, $proto, $ret, $config);

my ($oid) = $cce->find('System');
my ($ok, $obj) = $cce->get($oid);

# Get "System" . "Web":
my ($ok, $objWeb) = $cce->get($oid, 'Web');

# HTTP and SSL ports:
my $httpPort = "80";
if ($objWeb->{'httpPort'}) {
    $httpPort = $objWeb->{'httpPort'};
}
my $sslPort = "443";
if ($objWeb->{'sslPort'}) {
    $sslPort = $objWeb->{'sslPort'};
}

# O.K. What we bassically want to do is build up new section in the conf file
# for SSL sections.
for my $oid (@ssl_sites)
{
    my ($ok, $vsite) = $cce->get($oid);
    my $conf_file = httpd_get_vhost_conf_file($vsite->{name});

    open HTTPD_CONF, "<$conf_file" or die "Can't open $conf_file: $!\n";
   
    # reset
    @ssl_conf = ();
    %config = ();
    
    while(<HTTPD_CONF>) 
    {
	if ( /^<VirtualHost ([\d\.]+):$httpPort>/o ) 
        {
	    $ip = $1;
            # skip everything before the VirtualHost entry since it doesn't need to be duplicated
            last;
	}
    }

    # read the rest
    while(<HTTPD_CONF>)
    {
	# These two are for the rewrite options
	s/http/https/go if (/^Rewrite/);
	s/$httpPort/$sslPort/go if (/^Rewrite/);
	s#https://$vsite->{fqdn}/#https://$vsite->{fqdn}:$sslPort/# if (/^RewriteRule/);
        push @ssl_conf, $_;

	# Hardcoded, issues with mod_perl and cobalt modules.
        if (/^<\/Virtual/ && (-f "$vsite->{basedir}/certs/certificate") && (-f "$vsite->{basedir}/certs/key")) 
        {
	    push @Listen, "$ip:$sslPort";

	    $VirtualHost{"$ip:$sslPort"}{'SSLengine'} = 'on';
            if (-f "$vsite->{basedir}/certs/ca-certs")
            {
		$VirtualHost{"$ip:$sslPort"}{'SSLCACertificateFile'} = "$vsite->{basedir}/certs/ca-certs";
            }

	    # Support for GoDaddy certs through separate ca-chain residing in the Vsite's certs directory:
	    if (-f "$vsite->{basedir}/certs/ca-chain") {
		$VirtualHost{"$ip:$sslPort"}{'SSLCertificateChainFile'} = "$vsite->{basedir}/certs/ca-chain";
	    }

	    $VirtualHost{"$ip:$sslPort"}{'SSLCertificateFile'} = "$vsite->{basedir}/certs/certificate";
	    $VirtualHost{"$ip:$sslPort"}{'SSLCertificateKeyFile'} = "$vsite->{basedir}/certs/key";

        #### SSL Protocols and Ciphers:

            $VirtualHost{"$ip:$sslPort"}{'SSLProtocol'} = "-ALL +TLSv1 +SSLv3";
            $VirtualHost{"$ip:$sslPort"}{'SSLHonorCipherOrder'} = "On";
            $VirtualHost{"$ip:$sslPort"}{'SSLCipherSuite'} = "ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:!ECDHE-RSA-RC4-SHA:TLS_DHE_DSS_WITH_AES_256_CBC_SHA:!TLS_RSA_WITH_RC4_128_SHA:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:AES128-GCM-SHA256:RC4:TLS_ECDHE_RSA_WITH_RC4_128_SHA:HIGH:!aNULL:!eNULL:!EXP:!LOW:!MD5:!RC4";

                # Explanation: The ECDHE ciphers won't work yet as our underlying OpenSSL is too old and has been crippled by RedHat anyway <sigh>.
                # See: https://bugzilla.redhat.com/show_bug.cgi?id=319901
                # So we fall back to DHE, which allows Forward Secrecy on all browsers but the ones from Microsoft and is the next best thing below ECDHE.
                # Most Microsoft browsers post Windows XP's IE will use either TLS_RSA_WITH_AES_256_CBC_SHA instead.
                # Chrome, Firefox, Opera and Safari will almost all use TLS_DHE_RSA_WITH_AES_256_CBC_SHA instead, which allows Forward Secrecy.
                # Anything but IE6/XP, IE8/XP, Java 6u45 and Java 7u25 (which will use 168bit keys) will use 256bit keys instead. 
                # Protocols: Only IE6/XP will use SSLv3. All the rest default to TLS1.0.
                # Ciphers: Usage of RC4 has been disabled. It can theorethically be broken (GHCQ claims it, too) and it's a weak bugger to begin with anyway.
                # At this time nobody can say with a certain degree of reliability which ciphers and keys are 'more safe' to use. Until that FUD has been sorted,
                # we operate on the 'best guess' assumption. If you have a better guess, let us know. Seriously.
        ####

	    foreach my $conf (@ssl_conf) {
		if ($conf =~ /^([^ ]+) (.+)/ && $conf !~ /^#/) {
		    $VirtualHost{"$ip:$sslPort"}{"$conf"} = "";
		}
	    }
	}
    }
    close HTTPD_CONF;
}

$cce->bye('SUCCESS');

if (-f '/etc/DEBUG')
{
    use Data::Dumper;
    print Dumper(%VirtualHost);
    print STDERR Apache2::PerlSections->dump();
}
</Perl>
