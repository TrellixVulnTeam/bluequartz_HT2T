# let's assume that base-ssl does the right thing, the key and cert files 
# should always be there.  If there not, someone was messing with
# things they obviously should not have been.
#
# This is more or less a rewrite of ssl_perl.conf to cope with deficiencies of
# Apache2::PerlSections. On itself it doesn't keep the order of Rewrite rules or
# any other configuration lines. To compensate that, Tie::DxHash is used.

<Perl>
use Tie::DxHash;
use Apache2::PerlSections();
use lib qw(/usr/sausalito/perl);
use CCE;
use Base::Httpd qw(httpd_get_vhost_conf_file);

my $cce = new CCE;
$cce->connectuds();

my @ssl_sites = $cce->find('Vsite', { 'SSL.enabled' => 1 }, { 'SSL.expires' => '^.+' });

# Only a temp variable until we go the whole hog.
my (@ssl_conf, $ip, $rewrite_rules, $proto, $ret, $config);

#  What we bassically want to do is build up new section in the conf file
# for SSL enabled Vsites. For that we loop through all SSL enabled Vsites:

for my $oid (@ssl_sites) {

    # Get Vsite data out of CODB:
    my ($ok, $vsite) = $cce->get($oid);
    my $conf_file = httpd_get_vhost_conf_file($vsite->{name});

    # Tell Apache to listen on port 443 on the IPs of all SSL enabled Vsites:
    my $vhip = $vsite->{ipaddr};
    push(@Listen, "$vhip:443");

    # Preserve hash insertion order:
    my %vh;
    tie(%vh, 'Tie::DxHash');

    # Do some variable mapping:
    my $vh = $vhip;
    my $vhfqdn = $vsite->{fqdn};
    my $sr = $vsite->{basedir};
    my $site = $vsite->{name};

    # Line up the ducks for the Apache section for the individual SSL enabled vhosts:
    %vh = (
        SSLEngine => 'on',
        ssl_ca_config($sr, $cfg),
        ssl_chain_config($sr, $cfg),
        basic_ssl_config($sr, $cfg),
        directory_sections($conf_file, $site, $vh, $vhfqdn, $sr, $cfg)
    );

    # Assemble all the necessary data into a dynamically created Vhost container for this vhost. But only if the vsite doesn't
    # have a STOPACTION set for missing key or cert:
    if (%vh->{STOPACTION} ne "NOCERT") {
	$VirtualHost{"$vhip:443"} = \%vh;
    }
    else {
	if (-f '/etc/DEBUG') {
	    print STDERR "\nSite $vhfqdn has SSL enabled in CODB, but certiciate and/or key are missing! \n";
	}
    }
}

### That's it. Below are the subroutines that do the magic:

#
# Return the CA SSL vhost configuration if there is one:
#
sub ssl_ca_config {
        my ($sr, $cfg) = @_;

	my $CAcertPath = "$sr/certs/ca-certs";
	if (-f $CAcertPath) {
		return (
		    SSLCACertificateFile => "$sr/certs/ca-certs"
		);
	}
	else {
	    return();
	}
}

#
# Return the SSL chain vhost configuration if there is one:
#
sub ssl_chain_config {
        my ($sr, $cfg) = @_;

	# Support for GoDaddy certs through separate ca-chain residing in the Vsite's certs directory:
	if (-f "$sr/certs/ca-chain") {
		return (
		    SSLCertificateChainFile => "$sr/certs/ca-chain"
		);
	}
	else {
	    return();
	}
}

#
# Return the SSL certificate and key file vhost configuration.
#
sub basic_ssl_config {
        my ($sr, $cfg) = @_;

	if ((-f "$sr/certs/certificate") && (-f "$sr/certs/key")) {
    	    return (
		SSLProtocol		    => "-ALL +SSLv3 +TLSv1 -SSLv2",
		SSLHonorCipherOrder	    => "On",
		SSLCipherSuite		    => "ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:!ECDHE-RSA-RC4-SHA:!TLS_RSA_WITH_RC4_128_SHA:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:AES128-GCM-SHA256:RC4:TLS_ECDHE_RSA_WITH_RC4_128_SHA:HIGH:!aNULL:!eNULL:!EXP:!LOW:!MD5:!RC4",
        	SSLCertificateFile          => "$sr/certs/certificate",
        	SSLCertificateKeyFile       => "$sr/certs/key"
    	    );

	    # Choice between pest and cholera:
		# Disables RC4 based protocols, which allegedly have been compromised by GCHQ and NSA. However, allegedly opens up against the theoretical BEAST attack. In my opinion this is the better choice:
		#SSLCipherSuite		    => "ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:!ECDHE-RSA-RC4-SHA:!TLS_RSA_WITH_RC4_128_SHA:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:AES128-GCM-SHA256:RC4:TLS_ECDHE_RSA_WITH_RC4_128_SHA:HIGH:!aNULL:!eNULL:!EXP:!LOW:!MD5:!RC4",

		# Secure against BEAST attack, but still uses the RC4 protocols and is therefore an open book for the NSA and GCHQ, as almost all browsers will then fall back to the TLS_RSA_WITH_RC4_128_SHA cypher, which is as crappy as it gets:
		#SSLCipherSuite		    => "ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-RC4-SHA:TLS_RSA_WITH_RC4_128_SHA:TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:AES128-GCM-SHA256:RC4:TLS_ECDHE_RSA_WITH_RC4_128_SHA:HIGH:!aNULL:!eNULL:!EXP:!LOW:!MD5",

		# However: The ECDHE ciphers won't work yet as our underlying OpenSSL is too old <sigh>. We will need them when eventually activate Forward Secrecy for SSL.

    	}
	else {
	    # Vsite has SSL enabled, but cert or key are missing. Set a stopaction for later usage:
	    return(
		STOPACTION		    => "NOCERT"
	    );
	}
}

#
# Return the Rewrite* vhost configuration.
#
sub rewrite_config {
        my ($vh, $vhfqdn, $sr, $all_webAliases, $cfg) = @_;

        return (
            SSLCertificateFile          => "$sr/certs/certificate",
            SSLCertificateKeyFile       => "$sr/certs/key"
        );
}

#
# Return the anything else from parsed Vhost container:
#
sub directory_sections {
        my ($conf_file, $site, $vh, $vhfqdn, $sr, $cfg) = @_;

    open HTTPD_CONF, "<$conf_file" or die "Can't open $conf_file: $!\n";

    # reset
    @ssl_conf = ();
    %config = ();

    my %dir_spec = {};
    tie(%dir_spec, 'Tie::DxHash');

    while(<HTTPD_CONF>) {
	if ( /^<VirtualHost ([\d\.]+):80>/o ) {
            # skip <VirtualHost ...> as we don't need it.
            next;
	}
	if ( /^<\/VirtualHost>/ig ) {
            # skip </VirtualHost> as we don't need it.
            next;
	}
	if ( /^NameVirtualHost(.*)$/ig ) {
            # Line starting with NameVirtualHost
            next;
	}
	if ( /^#(.*)$/ig ) {
	    # Skip all comments.
            next;
	}
	if ( /^\s[\t]*$/ig ) {
	    # Skip all blank lines.
            next;
	}

	# Change 'http' to 'https' in all 'Rewrite' lines and change the port from '80' to '443':
	s/http/https/go if (/^Rewrite/);
	s/80/443/go if (/^Rewrite/);

	# Change the 'RewriteRule' to port '443' as well:
	s#https://$vhfqdn/#https://$vhfqdn:443/# if (/^RewriteRule/);

	# Remove linebreaks:
	chomp;

	# Push all remaining stuff into an array:
        push @ssl_conf, $_;
    }
    close HTTPD_CONF;

    # Turn array into a hash:
    %dir_spec = map { split(/\s+/, $_, 2) } @ssl_conf;

    if (-f '/etc/DEBUG') {
	print STDERR "Sanitized vhost container data for $vhfqdn:\n";
        use Data::Dumper;
        print Dumper(\%dir_spec);
    }

    # Return results:
    return (%dir_spec);

}

$cce->bye('SUCCESS');

if (-f '/etc/DEBUG') {
    print STDERR "\nNew SSL Vhost data:\n";
    use Data::Dumper;
    print Dumper(%VirtualHost);
    print STDERR Apache2::PerlSections->dump;
}
</Perl>
